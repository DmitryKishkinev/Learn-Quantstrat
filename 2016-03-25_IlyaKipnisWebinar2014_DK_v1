## NOTE: Learning code based on Ilya Kipnis webinar from here https://www.youtube.com/watch?v=61_F2fcvrsw 
## First make sure you installed R version 3.0.3 or higher
## RTools 3.3 or higher and that by installation PATH is checked
## and RTools is working under RStudio https://github.com/stan-dev/rstan/wiki/Install-Rtools-for-Windows


## Download SPY data, chart them, zoom in/out
## Only daily free data from Yahoo Finance

getSymbols(Symbols = "SPY", from="1998-01-01", to="2012-12-31")

chart_Series(SPY)

zoom_Chart("2008")

zoom_Chart("2008-01-01::2008-06-30")

zoom_Chart("2008::2012")

zoom_Chart("2008-03")

chart_Series(SPY, subset="2008-01-01::2009-12-31")

## Adding indicators

## Adding Simple Moving Average (SMA). Args: instrument (SPY), n = 200 (200 time frames, eg, days, to average)
## Cl - function taking close prices from df SPY

sma <- SMA(x=Cl(SPY),n=200)

## If arguments of any indicator functions are needed

args(SMA)

## Adding indicators to charts

chart_Series(SPY, subset="2008-01-01::2009-12-31")
add_TA(sma, on=1, col="blue")

## Relative Strength Indicator (RSI)
## Adding RSI to chart
## Note: arg on= means which window will be used
## by default windows are added n=1, n=2 etc

rsi<-RSI(Cl(SPY),n=2)
add_TA(rsi, col="green", lwd=2)

## Some data boilerplate code
## Ilya did not explain in details
## Not so important now
## no warning messages
## clear environment
## set environmental time, UTC
## set currency USD
## stock function is simple for ETF, multiplier more than 1 for futures/options
## initDate is the beginning of available data set


require(quantstrat)
require(IKTrading)

options("getSymbols.warning4.0"=FALSE)
rm(list=ls(.blotter), envir=.blotter)
currency('USD')
Sys.setenv(TZ="UTC")
symbols<-"SPY"
suppressMessages(getSymbols(symbols,from="1998-01-01", to="2012-12-31"))
stock(symbols, currency="USD", multiplier=1)
initDate="1990-01-01"

## Set up trade size and initial equity
## here trade size equals tradeSize due to one ETF we trade

tradeSize <- 100000
initEq <- tradeSize*length(symbols)

## Clear up portfolio, strategy
## Initializing a bunch of things needed for strategy to run: Portfolio, Account, 

strategy.st <- portfolio.st <- account.st <- "RSI_10_6"
rm.strat(portfolio.st)
rm.strat(strategy.st)
initPortf(portfolio.st, symbols=symbols, initDate=initDate, currency='USD')
initAcct(account.st, portfolios=portfolio.st, initDate=initDate, currency='USD', initEq=initEq)
initOrders(portfolio.st, initDate=initDate)
strategy(strategy.st, store=TRUE)

## Parameters of strategy Larry Connor RSI_10_6
## strategy to buy dips on bull market based on RSI

nRSI=2
thresh1=10
thresh2=6

nSMAexit=5
nSMAfilter=200

period = 10
pctATR = .02
maxPct = .04

## Adding indicators

add.indicator(strategy.st, name="lagATR",
              arguments=list(HLC=quote(HLC(mktdata)), n=period),
              label="atrX")

add.indicator(strategy.st, name="RSI",
              arguments=list(price=quote(Cl(mktdata)), n=nRSI),
              label="rsi")

add.indicator(strategy.st, name="SMA",
              arguments=list(x=quote(Cl(mktdata)), n=nSMAexit),
              label="quickMA")

add.indicator(strategy.st, name="SMA",
              arguments=list(x=quote(Cl(mktdata)), n=nSMAfilter),
              label="filterMA")

## adding Signals

add.signal(strategy.st, name="sigComparison",
           arguments=list(columns=c("Close", "filterMA"), relationship="gt"), 
           label="upTrend")

add.signal(strategy.st, name="sigThreshold",
           arguments=list(column="rsi", threshold=thresh1, 
                          relationship="lt", cross=FALSE), 
           label="rsiThresh1")

add.signal(strategy.st, name="sigThreshold",
           arguments=list(column="rsi", threshold=thresh2, 
                          relationship="lt", cross=FALSE), 
           label="rsiThresh2")

add.signal(strategy.st, name="sigAND",
           arguments=list(columns=c("rsiThresh1","upTrend"), cross=TRUE), 
           label="longEntry1")

add.signal(strategy.st, name="sigAND",
           arguments=list(columns=c("rsiThresh2","upTrend"), cross=TRUE), 
           label="longEntry2")

add.signal(strategy.st, name="sigCrossover",
           arguments=list(columns=c("Close","quickMA"), relationship="gt"),
           label="exitLongNormal")

add.signal(strategy.st, name="sigCrossover",
           arguments=list(columns=c("Close","filterMA"), relationship="lt"),
           label="exitLongFilter")

## Adding Rules

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="longEntry1",
                        sigval=TRUE,
                        ordertype="market",
                        orderside="long",
                        replace=FALSE,
                        prefer="Open",
                        osFUN=osDollarATR,
                        tradeSize=tradeSize,
                        pctATR=pctATR,
                        maxPctATR=pctATR,
                        atrMod="X"),
         type="enter", path.dep=TRUE, label="enterLong1")

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="longEntry2",
                        sigval=TRUE,
                        ordertype="market",
                        orderside="long",
                        replace=FALSE,
                        prefer="Open",
                        osFUN=osDollarATR,
                        tradeSize=tradeSize,
                        pctATR=pctATR,
                        maxPctATR=maxPct,
                        atrMod="X"),
         type="enter", path.dep=TRUE, label="enterLong2")

add.rule(strategy.st, name="ruleSignal",
         arguments=list(sigcol="exitLongNormal",
                        sigval=TRUE,
                        orderqty="all",
                        ordertype="market",
                        orderside="long",
                        replace=FALSE,
                        prefer="Open"),
         type="exit", path.dep=TRUE, label="normalExitLong")

add.rule(strategy.st, name="ruleSignal",
          arguments=list(sigcol="exitLongFilter",
                        sigval=TRUE,
                        orderqty="all",
                        ordertype="market",
                        orderside="long",
                        replace=FALSE,
                        prefer="Open"),
          type="exit", path.dep=TRUE, label="filterExitLong")

## Apply strategy

t1 <- Sys.time()
out <- applyStrategy(strategy=strategy.st, portfolios=portfolio.st)
t2 <- Sys.time()
print(t2-t1)

## set up analytics

updatePortf(portfolio.st)
dateRange<- time(getPortfolio(portfolio.st)$summary)[-1]
updateAcct(portfolio.st, dateRange)
updateEndEq(account.st)

## Trade statistics

tStats <- tradeStats(Portfolios = portfolio.st, use="trades", inclZeroDays=FALSE)
tStats[,4:ncol(tStats)] <- round(tStats[,4:ncol(tStats)], 2)         
print(data.frame(t(tStats[,c(1,2)])))
(aggPF <- sum(tStats$Gross.Profits)/-sum(tStats$Gross.Losses))
(aggCorrect <- mean(tStats$Percent.Positive))
(numTrades <- sum(tStats$Num.Trades))
(meanAvgWLR <- mean(tStats$Avg.WinLoss.Ratio[tStats$Avg.WinLoss.Ratio < Inf],na.rm=TRUE))

## Daily and duration statistics

dStats <- dailyStats(Portfolios = portfolio.st, use="Equity")
rownames(dStats) <- gsub(".DailyEndEq", "", rownames(dStats))
print(data.frame(t(dStats)))
durStats <- durationStatistics(Portfolio=portfolio.st, Symbols=sort(symbols))
indivDurStats <- durationStatistics(Portfolio=portfolio.st, Symbols=sort(symbols), aggregate=FALSE)
print(t(durStats))
print(t(individualDurStats))

## Charting trades and strategy performance (from Guy Yollin's lecture, quantstrat update 9/2014)
## http://www.r-programming.org/papers
## with my edits

myTheme<-chart_theme()
myTheme$col$dn.col<-'lightblue'
myTheme$col$dn.border <- 'lightgray'
myTheme$col$up.border <- 'lightgray'

chart.Posn(strategy.st, Symbol = 'SPY', Dates = '2006::2006',theme=myTheme,
           TA='add_SMA(n=200,col=4, on=1, lwd=2)')

## Again trading stats from Guy Yollin's lecture

tstats <- t(tradeStats(strategy.st))
print(tstats)

## Retrieving the account summary and visualizing it by lattice library
## xyplot displays the entire account summary multivariate time series

a <- getAccount(strategy.st)
library(lattice)
xyplot(a$summary,type="h",col=4)


## Plot equity curve and performance chart

equity <- a$summary$End.Eq
plot(equity,main="RSI_10_6 Strategy Equity Curve")
ret <- Return.calculate(equity,method="log")
charts.PerformanceSummary(ret, colorset = bluefocus,
                          main="RSI_10_6 Strategy Performance")

